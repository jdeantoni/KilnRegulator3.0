swagger: "2.0"
info:
  description: ""
  version: "0.1.0"
  title: "KilnRegulator"
  contact:
    url: "https://github.com/jdeantoni/KilnRegulator3.0/issues"
  license:
    name: "MIT"
host: "127.0.0.1:3000"
basePath: "/"
tags:
- name: "status"
- name: "cookings"
- name: "programs"
- name: "action"
- name: "debug"
- name: "errors"
schemes:
- "http"
paths:
  /status:
    get:
      tags:
      - "status"
      summary: "Get current status of oven"
      operationId: "getStatus"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Status"
  /status/cooking:
    get:
      tags:
      - "status"
      summary: "Get current cooking info from the beginning"
      operationId: "getCurrentCooking"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Cooking"

  /cookings:
    get:
      tags:
      - "cookings"
      summary: "Get all cookings uuid/programId/date (without samples)"
      operationId: "getCookings"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "all cookings"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Cooking"
  /cookings/{uuid}:
    get:
      tags:
      - "cookings"
      summary: "get the cooking with the given uuid (including all samples)"
      operationId: "getCooking"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "uuid"
        type: "string"
        required: true
        format: "uuid"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Cooking"

  /programs:
    get:
      tags:
      - "programs"
      summary: "Get all programs"
      operationId: "getPrograms"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "all programs"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Program"
    post:
      tags:
      - "programs"
      summary: "add new program"
      operationId: "addProgram"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/Program"
      responses:
        200:
          description: "successful operation"
        409:
          description: "program already exists (uuid not unique)"
        500:
          description: "internal server error (database)"
  /programs/{uuid}:
    get:
      tags:
      - "programs"
      summary: "Get one program"
      operationId: "getProgram"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "uuid"
        type: "string"
        required: true
        format: "uuid"
      responses:
        200:
          description: "all programs"
          schema:
            $ref: "#/definitions/Program"
        400:
          description: "missing uuid"
        404:
          description: "old program not found"
    put:
      tags:
      - "programs"
      summary: "edit program, ie. archive old program if referenced or delete it, and add new program"
      operationId: "editProgram"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "uuid"
        type: "string"
        required: true
        format: "uuid"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/Program"
      responses:
        200:
          description: "successful operation"
        400:
          description: "missing uuid"
        404:
          description: "old program not found"
        500:
          description: "internal server error (database)"
    delete:
      tags:
      - "programs"
      summary: "delete program, ie. archive old program if referenced or delete it"
      operationId: "deleteProgram"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "uuid"
        type: "string"
        required: true
        format: "uuid"
      responses:
        200:
          description: "successful operation"
        400:
          description: "missing uuid"
        404:
          description: "old program not found"
        500:
          description: "internal server error (database)"
  /action/start:
    post:
      tags:
      - "action"
      summary: "Start cooking"
      operationId: "startCooking"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          type: "object"
          properties:
            uuid:
              type: "string"
              description: "UUID of program to start on oven"
              format: "uuid"
      - in: "query"
        type: "number"
        name: "delay"
        required: false
        description: "optional time for delayed cooking, in hour"
        format: "float"
      responses:
        200:
          description: "successful operation"
        400:
          description: "invalid operation, ex. already started or program not found"
        500:
          description: "could not start cooking"
  /action/stop:
    post:
      tags:
      - "action"
      summary: "Stop cooking"
      operationId: "stopCooking"
      responses:
        200:
          description: "successful operation"
        400:
          description: "invalid operation, ex. not running"
        500:
          description: "could not stop cooking"
  /action/emergencystop:
    post:
      tags:
      - "action"
      summary: "PANIC"
      operationId: "emergencyStop"
      responses:
        200:
          description: "successful operation"
        400:
          description: "invalid operation, ex. not running"
        500:
          description: "could not stop cooking"
  /action/reset:
    post:
      tags:
      - "action"
      summary: "Reset cooking"
      operationId: "resetCooking"
      responses:
        200:
          description: "successful operation"
        400:
          description: "invalid operation, ex. not stopped"
        500:
          description: "could not reset cooking"

  /errors:
    get:
      tags:
      - "errors"
      summary: "Get error if any"
      operationId: "getError"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "message"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Error"
    delete:
      tags:
      - "errors"
      summary: "Clear error if any"
      operationId: "clearError"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "deleted all errors"

  /debug:
    get:
      tags:
      - "debug"
      summary: "Get current status of oven with debugging info"
      operationId: "getDebug"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Debug"
    post:
      tags:
      - "debug"
      summary: "set target temperature"
      operationId: "setSetpoint"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          type: "object"
          properties:
            setpoint:
              type: "number"
              format: "double"
      responses:
        200:
          description: "successful operation"




definitions:
  Status:
    type: "object"
    properties:
      errored:
        type: "boolean"
      state:
        type: "string"
        enum:
        - "ready"
        - "running"
        - "stopped"
        - "error"
        - "delayed"
      elementState:
        type: "string"
        enum:
        - "heating"
        - "stale"
        - "cooling"
      sample:
        $ref: "#/definitions/Sample"
  Debug:
    type: "object"
    properties:
      state:
        type: "string"
        enum:
        - "ready"
        - "running"
        - "stopped"
        - "error"
        - "delayed"
      elementState:
        type: "string"
        enum:
        - "heating"
        - "stale"
        - "cooling"
      sample:
        $ref: "#/definitions/Sample"
      segment:
        type: "integer"
        format: "int32"
  Segment:
    type: "object"
    properties:
      targetTemperature:
        type: "integer"
        description: "target temperature at the end of the segment"
        format: "int64"
      slope:
        type: "number"
        description: "slope in Â°C/second"
        format: "float"
      duration:
        type: "number"
        description: "duration in seconds"
        format: "float"
  Program:
    type: "object"
    properties:
      uuid:
        type: "string"
        description: "Program UUID used for this cooking"
        format: "uuid"
      name:
        type: "string"
        description: "Program name"
      lastModificationDate:
        type: "string"
        description: "Date and time when this program was last modified"
        format: "date-time"
      segments:
        type: "array"
        items:
          $ref: "#/definitions/Segment"
      segmentEditableStates:
        type: "array"
        items:
          type: "boolean"
  Sample:
    type: "object"
    properties:
      timestamp:
        type: "integer"
        description: "timestamp relative to startDate"
        format: "int64"
      temperature:
        type: "number"
        format: "float"
  Cooking:
    type: "object"
    properties:
      uuid:
        type: "string"
        description: "UUID of this cooking"
        format: "uuid"
      programId:
        type: "string"
        description: "Program UUID used for this cooking"
        format: "uuid"
      startDate:
        type: "string"
        description: "Date and time when this cooking started"
        format: "date-time"
      samples:
        type: "array"
        items:
          $ref: "#/definitions/Sample"
      error:
        type: "string"
        description: "If present something bad happened"
  Error:
    type: "object"
    properties:
      code:
        type: "integer"
        description: "see errorcode.txt"
        format: "int32"
      message:
        type: "string"
