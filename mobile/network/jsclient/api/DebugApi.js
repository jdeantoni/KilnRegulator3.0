/**
 * KilnRegulator
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Body1', 'model/Debug'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Body1'), require('../model/Debug'));
  } else {
    // Browser globals (root is window)
    if (!root.KilnRegulator) {
      root.KilnRegulator = {};
    }
    root.KilnRegulator.DebugApi = factory(root.KilnRegulator.ApiClient, root.KilnRegulator.Body1, root.KilnRegulator.Debug);
  }
}(this, function(ApiClient, Body1, Debug) {
  'use strict';

  /**
   * Debug service.
   * @module api/DebugApi
   * @version 0.1.0
   */

  /**
   * Constructs a new DebugApi. 
   * @alias module:api/DebugApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getDebug operation.
     * @callback module:api/DebugApi~getDebugCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Debug} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get current status of oven with debugging info
     * @param {module:api/DebugApi~getDebugCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Debug}
     */
    this.getDebug = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Debug;

      return this.apiClient.callApi(
        '/debug', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setSetpoint operation.
     * @callback module:api/DebugApi~setSetpointCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * set target temperature
     * @param {module:model/Body1} body 
     * @param {module:api/DebugApi~setSetpointCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setSetpoint = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling setSetpoint");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/debug', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
