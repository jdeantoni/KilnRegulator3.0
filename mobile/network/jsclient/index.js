/**
 * KilnRegulator
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Body', 'model/Cooking', 'model/Debug', 'model/Error', 'model/Program', 'model/Sample', 'model/Segment', 'model/Status', 'api/ActionApi', 'api/DebugApi', 'api/ErrorsApi', 'api/ProgramsApi', 'api/StatusApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./model/Body'), require('./model/Cooking'), require('./model/Debug'), require('./model/Error'), require('./model/Program'), require('./model/Sample'), require('./model/Segment'), require('./model/Status'), require('./api/ActionApi'), require('./api/DebugApi'), require('./api/ErrorsApi'), require('./api/ProgramsApi'), require('./api/StatusApi'));
  }
}(function(ApiClient, Body, Cooking, Debug, Error, Program, Sample, Segment, Status, ActionApi, DebugApi, ErrorsApi, ProgramsApi, StatusApi) {
  'use strict';

  /**
   * .<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var KilnRegulator = require('index'); // See note below*.
   * var xxxSvc = new KilnRegulator.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new KilnRegulator.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new KilnRegulator.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new KilnRegulator.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module index
   * @version 0.1.0
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The Body model constructor.
     * @property {module:model/Body}
     */
    Body: Body,
    /**
     * The Cooking model constructor.
     * @property {module:model/Cooking}
     */
    Cooking: Cooking,
    /**
     * The Debug model constructor.
     * @property {module:model/Debug}
     */
    Debug: Debug,
    /**
     * The Error model constructor.
     * @property {module:model/Error}
     */
    Error: Error,
    /**
     * The Program model constructor.
     * @property {module:model/Program}
     */
    Program: Program,
    /**
     * The Sample model constructor.
     * @property {module:model/Sample}
     */
    Sample: Sample,
    /**
     * The Segment model constructor.
     * @property {module:model/Segment}
     */
    Segment: Segment,
    /**
     * The Status model constructor.
     * @property {module:model/Status}
     */
    Status: Status,
    /**
     * The ActionApi service constructor.
     * @property {module:api/ActionApi}
     */
    ActionApi: ActionApi,
    /**
     * The DebugApi service constructor.
     * @property {module:api/DebugApi}
     */
    DebugApi: DebugApi,
    /**
     * The ErrorsApi service constructor.
     * @property {module:api/ErrorsApi}
     */
    ErrorsApi: ErrorsApi,
    /**
     * The ProgramsApi service constructor.
     * @property {module:api/ProgramsApi}
     */
    ProgramsApi: ProgramsApi,
    /**
     * The StatusApi service constructor.
     * @property {module:api/StatusApi}
     */
    StatusApi: StatusApi
  };

  return exports;
}));
