{"version":3,"sources":["StackViewCard.tsx"],"names":["React","Animated","StyleSheet","Platform","Screen","ThemeContext","ThemeColors","createPointerEventsContainer","EPS","getAccessibilityProps","isActive","OS","accessibilityElementsHidden","importantForAccessibility","Card","props","children","pointerEvents","style","position","transparent","scene","index","active","select","web","default","interpolate","inputRange","outputRange","extrapolate","animatedStyle","shadowOpacity","overlayOpacity","containerAnimatedStyle","flattenedStyle","flatten","backgroundColor","screenStyle","isDark","context","baseCardStyle","styles","transparentDark","cardDark","transparentLight","cardLight","onComponentRef","shadow","overlayDark","overlayLight","opacity","Component","contextType","create","flex","light","body","dark","absoluteFillObject","top","left","bottom","width","shadowOffset","height","shadowRadius","shadowColor"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  StyleSheet,\n  Platform,\n  StyleProp,\n  ViewStyle,\n} from 'react-native';\nimport { Screen } from 'react-native-screens';\nimport { ThemeContext, ThemeColors } from '@react-navigation/core';\n\nimport createPointerEventsContainer, {\n  InputProps,\n  InjectedProps,\n} from './createPointerEventsContainer';\n\ntype Props = InputProps &\n  InjectedProps & {\n    style: StyleProp<ViewStyle>;\n    animatedStyle: any;\n    position: Animated.AnimatedInterpolation;\n    transparent?: boolean;\n    children: React.ReactNode;\n  };\n\nconst EPS = 1e-5;\n\nfunction getAccessibilityProps(isActive: boolean) {\n  if (Platform.OS === 'ios') {\n    return {\n      accessibilityElementsHidden: !isActive,\n    };\n  } else if (Platform.OS === 'android') {\n    return {\n      importantForAccessibility: isActive ? 'yes' : 'no-hide-descendants',\n    };\n  } else {\n    return {};\n  }\n}\n\n/**\n * Component that renders the scene as card for the <StackView />.\n */\nclass Card extends React.Component<Props> {\n  static contextType = ThemeContext;\n  context!: React.ContextType<typeof ThemeContext>;\n\n  render() {\n    const {\n      children,\n      pointerEvents,\n      style,\n      position,\n      transparent,\n      scene: { index, isActive },\n    } = this.props;\n\n    const active: Animated.Value | number | boolean = Platform.select({\n      web: isActive,\n      // @ts-ignore\n      default:\n        transparent || isActive\n          ? 1\n          : position.interpolate({\n              inputRange: [index, index + 1 - EPS, index + 1],\n              outputRange: [1, 1, 0],\n              extrapolate: 'clamp',\n            }),\n    });\n\n    // animatedStyle can be `false` if there is no screen interpolator\n    const animatedStyle = this.props.animatedStyle || {};\n\n    const {\n      shadowOpacity,\n      overlayOpacity,\n      ...containerAnimatedStyle\n    } = animatedStyle;\n\n    let flattenedStyle = StyleSheet.flatten(style) || {};\n    let { backgroundColor, ...screenStyle } = flattenedStyle;\n    let isDark = this.context === 'dark';\n    let baseCardStyle;\n\n    if (isDark) {\n      baseCardStyle = transparent ? styles.transparentDark : styles.cardDark;\n    } else {\n      baseCardStyle = transparent ? styles.transparentLight : styles.cardLight;\n    }\n\n    return (\n      <Screen\n        pointerEvents={pointerEvents}\n        onComponentRef={this.props.onComponentRef}\n        style={[containerAnimatedStyle, screenStyle]}\n        // @ts-ignore\n        active={active}\n      >\n        {!transparent && shadowOpacity ? (\n          <Animated.View\n            style={[styles.shadow, { shadowOpacity }]}\n            pointerEvents=\"none\"\n          />\n        ) : null}\n        <Animated.View\n          {...getAccessibilityProps(isActive)}\n          style={[\n            baseCardStyle,\n            backgroundColor && backgroundColor !== 'transparent'\n              ? { backgroundColor }\n              : null,\n          ]}\n        >\n          {children}\n        </Animated.View>\n        {overlayOpacity ? (\n          <Animated.View\n            pointerEvents=\"none\"\n            style={[\n              isDark ? styles.overlayDark : styles.overlayLight,\n              { opacity: overlayOpacity },\n            ]}\n          />\n        ) : null}\n      </Screen>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  cardLight: {\n    flex: 1,\n    backgroundColor: ThemeColors.light.body,\n  },\n  cardDark: {\n    flex: 1,\n    backgroundColor: ThemeColors.dark.body,\n  },\n  overlayLight: {\n    ...StyleSheet.absoluteFillObject,\n    backgroundColor: '#000',\n  },\n  overlayDark: {\n    ...StyleSheet.absoluteFillObject,\n    backgroundColor: '#fff',\n  },\n  // TODO: what should shadow be styled like?\n  shadow: {\n    top: 0,\n    left: 0,\n    bottom: 0,\n    width: 3,\n    position: 'absolute',\n    backgroundColor: '#fff',\n    shadowOffset: { width: -1, height: 1 },\n    shadowRadius: 5,\n    shadowColor: '#000',\n  },\n  transparentLight: {\n    flex: 1,\n    backgroundColor: 'transparent',\n  },\n  transparentDark: {\n    flex: 1,\n    backgroundColor: 'transparent',\n  },\n});\n\nexport default createPointerEventsContainer(Card);\n"]}