{"version":3,"sources":["createConfigGetter.js"],"names":["applyConfig","configurer","navigationOptions","configProps","routeConfigs","navigatorScreenConfig","navigation","screenProps","theme","state","route","routeName","Component","routeConfig","routeScreenConfig","componentScreenConfig","configOptions","outputConfig"],"mappings":"6PAAA,qEAEA,sFACA,sFAEA,QAASA,CAAAA,WAAT,CAAqBC,UAArB,CAAiCC,iBAAjC,CAAoDC,WAApD,CAAiE,CAC/D,GAAI,MAAOF,CAAAA,UAAP,GAAsB,UAA1B,CAAsC,CACpC,oCACKC,iBADL,CAEKD,UAAU,+BACRE,WADQ,EAEXD,iBAAiB,CAAjBA,iBAFW,GAFf,EAOD,CACD,GAAI,MAAOD,CAAAA,UAAP,GAAsB,QAA1B,CAAoC,CAClC,oCACKC,iBADL,CAEKD,UAFL,EAID,CACD,MAAOC,CAAAA,iBAAP,CACD,C,aAEc,kBAACE,YAAD,CAAeC,qBAAf,QAAyC,UACtDC,UADsD,CAEtDC,WAFsD,CAGtDC,KAHsD,CAInD,IACKC,CAAAA,KADL,CACeH,UADf,CACKG,KADL,CAEH,GAAMC,CAAAA,KAAK,CAAGD,KAAd,CAEA,uBACEC,KAAK,CAACC,SAAN,EAAmB,MAAOD,CAAAA,KAAK,CAACC,SAAb,GAA2B,QADhD,CAEE,gEAFF,EAKA,GAAMC,CAAAA,SAAS,CAAG,mCAAsBR,YAAtB,CAAoCM,KAAK,CAACC,SAA1C,CAAlB,CAEA,GAAME,CAAAA,WAAW,CAAGT,YAAY,CAACM,KAAK,CAACC,SAAP,CAAhC,CAEA,GAAMG,CAAAA,iBAAiB,CACrBD,WAAW,GAAKD,SAAhB,CAA4B,IAA5B,CAAmCC,WAAW,CAACX,iBADjD,CAEA,GAAMa,CAAAA,qBAAqB,CAAGH,SAAS,CAACV,iBAAxC,CAEA,GAAMc,CAAAA,aAAa,CAAG,CAAEV,UAAU,CAAVA,UAAF,CAAcC,WAAW,CAAEA,WAAW,EAAI,EAA1C,CAA8CC,KAAK,CAALA,KAA9C,CAAtB,CAEA,GAAIS,CAAAA,YAAY,CAAGjB,WAAW,CAACK,qBAAD,CAAwB,EAAxB,CAA4BW,aAA5B,CAA9B,CACAC,YAAY,CAAGjB,WAAW,CACxBe,qBADwB,CAExBE,YAFwB,CAGxBD,aAHwB,CAA1B,CAKAC,YAAY,CAAGjB,WAAW,CAACc,iBAAD,CAAoBG,YAApB,CAAkCD,aAAlC,CAA1B,CAEA,mCAAsBC,YAAtB,CAAoCP,KAApC,EAEA,MAAOO,CAAAA,YAAP,CACD,CAlCc,E","sourcesContent":["import invariant from '../utils/invariant';\n\nimport getScreenForRouteName from './getScreenForRouteName';\nimport validateScreenOptions from './validateScreenOptions';\n\nfunction applyConfig(configurer, navigationOptions, configProps) {\n  if (typeof configurer === 'function') {\n    return {\n      ...navigationOptions,\n      ...configurer({\n        ...configProps,\n        navigationOptions,\n      }),\n    };\n  }\n  if (typeof configurer === 'object') {\n    return {\n      ...navigationOptions,\n      ...configurer,\n    };\n  }\n  return navigationOptions;\n}\n\nexport default (routeConfigs, navigatorScreenConfig) => (\n  navigation,\n  screenProps,\n  theme\n) => {\n  const { state } = navigation;\n  const route = state;\n\n  invariant(\n    route.routeName && typeof route.routeName === 'string',\n    'Cannot get config because the route does not have a routeName.'\n  );\n\n  const Component = getScreenForRouteName(routeConfigs, route.routeName);\n\n  const routeConfig = routeConfigs[route.routeName];\n\n  const routeScreenConfig =\n    routeConfig === Component ? null : routeConfig.navigationOptions;\n  const componentScreenConfig = Component.navigationOptions;\n\n  const configOptions = { navigation, screenProps: screenProps || {}, theme };\n\n  let outputConfig = applyConfig(navigatorScreenConfig, {}, configOptions);\n  outputConfig = applyConfig(\n    componentScreenConfig,\n    outputConfig,\n    configOptions\n  );\n  outputConfig = applyConfig(routeScreenConfig, outputConfig, configOptions);\n\n  validateScreenOptions(outputConfig, route);\n\n  return outputConfig;\n};\n"]}